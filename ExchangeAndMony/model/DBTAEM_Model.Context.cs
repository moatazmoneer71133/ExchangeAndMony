//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExchangeAndMony.model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBTAEMEntities : DbContext
    {
        public DBTAEMEntities()
            : base("name=DBTAEMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Currencise> Currencises { get; set; }
        public virtual DbSet<Currencise1> Currencise1 { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tb_AccountStop> Tb_AccountStop { get; set; }
        public virtual DbSet<Tb_Blacklist> Tb_Blacklist { get; set; }
        public virtual DbSet<Tb_Box> Tb_Box { get; set; }
        public virtual DbSet<Tb_BuyingSelling> Tb_BuyingSelling { get; set; }
        public virtual DbSet<Tb_ConcelTransfer> Tb_ConcelTransfer { get; set; }
        public virtual DbSet<Tb_ConfirmedTransfer> Tb_ConfirmedTransfer { get; set; }
        public virtual DbSet<Tb_CurrenciesPrices> Tb_CurrenciesPrices { get; set; }
        public virtual DbSet<Tb_CustomerExchangeReceiptBonds> Tb_CustomerExchangeReceiptBonds { get; set; }
        public virtual DbSet<Tb_DailyRestictionsDitales> Tb_DailyRestictionsDitales { get; set; }
        public virtual DbSet<Tb_DailyrestictionsHead> Tb_DailyrestictionsHead { get; set; }
        public virtual DbSet<Tb_DeportationTransfar> Tb_DeportationTransfar { get; set; }
        public virtual DbSet<Tb_DoubleRestictions> Tb_DoubleRestictions { get; set; }
        public virtual DbSet<Tb_Employee> Tb_Employee { get; set; }
        public virtual DbSet<Tb_Entities> Tb_Entities { get; set; }
        public virtual DbSet<Tb_Groups> Tb_Groups { get; set; }
        public virtual DbSet<Tb_IncomingTotals> Tb_IncomingTotals { get; set; }
        public virtual DbSet<Tb_InventoryBox> Tb_InventoryBox { get; set; }
        public virtual DbSet<Tb_MatchingAccounts> Tb_MatchingAccounts { get; set; }
        public virtual DbSet<Tb_Outgoing> Tb_Outgoing { get; set; }
        public virtual DbSet<Tb_PersonalInformation> Tb_PersonalInformation { get; set; }
        public virtual DbSet<Tb_RoofingAccounts> Tb_RoofingAccounts { get; set; }
        public virtual DbSet<Tb_RwcipientCard> Tb_RwcipientCard { get; set; }
        public virtual DbSet<Tb_SimpleRegistBond> Tb_SimpleRegistBond { get; set; }
        public virtual DbSet<Tb_Transfar> Tb_Transfar { get; set; }
        public virtual DbSet<Tb_Users> Tb_Users { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
